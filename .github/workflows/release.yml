name: Create release tag and release note.

on:
  pull_request:
    types: [closed]
    branches:
      - main

defaults:
    run:
        shell: bash

jobs:
  create-release-tag:
    # PRがマージされたときのみ実行
    if: |
        github.event.pull_request.merged == true &&
        github.event.pull_request.head.ref == 'dev'
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TZ: "Asia/Tokyo"

    steps:
      - uses: actions/checkout@v4

      # 前回のリリースタグを取得
      - name: Get previous tag
        id: pre-tag
        run: |
          echo "PRE_TAG=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/releases/latest | jq -r .tag_name)" >> $GITHUB_OUTPUT

      # タグを生成 「{YYYY.MM.DD}-{当日リリース回数}」
      - name: Generate tag
        id: release-tag
        run: |
          TODAY=$(date +'%Y.%m.%d')
          pre_release_date=$(echo ${{ steps.pre-tag.outputs.PRE_TAG }} | awk -F'-' '{print $1}')
          pre_release_count=$(echo ${{ steps.pre-tag.outputs.PRE_TAG }} | awk -F'-' '{print $2}')
          if [[ ! $pre_release_date = $TODAY ]]; then
            pre_release_count=0
          fi
          echo "RELEASE_TAG=$TODAY-$(($pre_release_count + 1))" >> $GITHUB_OUTPUT

      # リリースノートにnotionのリンクを追加
      - name: Extract PR body
        id: pr-body
        run: |
          PR_NUMBER=$(gh pr list --base main --state merged --json number --jq '.[0].number' --limit 1)
          if [ -z "$PR_NUMBER" ]; then
            echo "No merged PR found."
            exit 1
          fi
          PR_BODY=$(gh pr view "$PR_NUMBER" --json body --jq '.body')
          notion_link=$(echo "$PR_BODY" | grep -o 'https://www.notion.so/[a-zA-Z0-9?=/-]*') || notion_link=""
          echo "NOTION_LINK=$notion_link" >> $GITHUB_OUTPUT

      # 前回リリースからの差分をもとに、変更点を取得する
      - name: Generate release note changes
        id: changes
        run: |
          CHANGES=$(
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name="${{ steps.release-tag.outputs.RELEASE_TAG }}" \
            -f previous_tag_name="${{ steps.pre-tag.outputs.PRE_TAG }}" \
            -f target_commitish="main" \
            -f configuration_file_path=".github/release.yml" \
             | jq -r .body)
          DELIMITER=$(openssl rand -hex 12)
          {
              echo "CHANGES<<$DELIMITER"
              echo "$CHANGES"
              echo "$DELIMITER"
          } >> $GITHUB_OUTPUT

      # リリースノートの本文を作成する
      - name: Create release note body
        id: release-note-body
        run: |
          NOTION_LINK="${{ steps.pr-body.outputs.NOTION_LINK }}"
          CHANGES="${{ steps.changes.outputs.CHANGES }}"
          RELEASE_NOTE_BODY=$(echo "$NOTION_LINK $CHANGES" | sed 's/\\"//g' | sed 's/["“]//g')
          DELIMITER=$(openssl rand -hex 12)
          {
              echo "RELEASE_NOTE_BODY<<$DELIMITER"
              echo "$RELEASE_NOTE_BODY"
              echo "$DELIMITER"
          } >> $GITHUB_OUTPUT

      # タグを切り、リリースノートを作成する
      - name: Generate release notes content for a release
        run: |
          RESPONSE=$(gh api \
            --method POST \
            -f tag_name="${{ steps.release-tag.outputs.RELEASE_TAG }}" \
            -f target_commitish="main" \
            -f name="${{ steps.release-tag.outputs.RELEASE_TAG }}" \
            -f body="${{ steps.release-note-body.outputs.RELEASE_NOTE_BODY }}" \
            /repos/${{ github.repository }}/releases)

            if [ $? -ne 0 ]; then
                echo "Failed to generate release note"
                exit 1
            fi

            echo "Response: $RESPONSE"
